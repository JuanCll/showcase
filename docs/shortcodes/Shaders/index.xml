<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computación Visual</title><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/</link><description>Recent content on Computación Visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Color_Blend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Color_Blend/</guid><description>Ejerecicios: Coloring # CMY y RGB # Marco teórico
RGB es un modelo de color basado en la síntesis aditiva, con el que es posible representar un color mediante la mezcla por adición de los tres colores de luz primarios. El modelo CMY es un modelo de color sustractivo que se utiliza en la impresión en colores. Es la versión moderna y más precisa del antiguo modelo tradicional de coloración (RYB).</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Procedural_texturing/</guid><description>Procedural texturing # En computación gráfica, una textura procedimental es una textura creada mediante una descripción matemática (es decir, un algoritmo) en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo coste de almacenamiento, la resolución ilimitada de las texturas y la facilidad de mapeo de las mismas.
Conclusiones
El uso de las texturas sobre sólidos permite emular elementos o estructuras para generar ambientación.} Referencias</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Spacial_Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Spacial_Coherence/</guid><description>Spacial Coherence # Exercise
Implement your own source dataset and a mechanism to select different images from it.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Texturing/</guid><description>Ejerecicios: Texturing # UV Visualization # Exercise
Redefine the shape texture coordinates to turn the above image upside down.
Exercise
Include the blue channel in the uv visualization (e.g., use blue with red or green channels).
Texture Sampling # HSL( hue, saturation, lightness) y HSV ( hue, saturation, value o HSB con brightness) son formas alternativas de representar el modelo de color RGB.
Hue (Tono): Es el color mismo, definido físicamente por una longitud de onda.</description></item></channel></rss>