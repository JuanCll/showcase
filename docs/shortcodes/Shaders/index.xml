<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computación Visual</title><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/</link><description>Recent content on Computación Visual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Color_Blend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Color_Blend/</guid><description>Ejercicios: Coloring # CMY y RGB # Marco teórico
RGB es un modelo de color basado en la síntesis aditiva, con el que es posible representar un color mediante la mezcla por adición de los tres colores de luz primarios. El modelo CMY es un modelo de color sustractivo que se utiliza en la impresión en colores. Es la versión moderna y más precisa del antiguo modelo tradicional de coloración (RYB).</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Lighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Lighting/</guid><description>Lighting # Gracias a la iluminación en la computación grafica se puede llegar a dar más detalle a los materias, imágenes y figuras recreadas en un programa.
Existen dos principales modelos de iluminación, Object oriented lighting (iluminación directa) y Global illumination (iluminación indirecta), el primero es usar una iluminación para un solo objeto, mientras en la segunda da luz a toda la &amp;ldquo;escena&amp;rdquo;
Exercise Colored Ambient light
Implement a scene having the following lighting equation: \mathbf{a} = ambient , ambient4a=ambientambient4, where ambient4ambient4 is the ambient light color.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Photomosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Photomosaic/</guid><description>*Ejercicios: Photomosaic # ASCII art # Marco teórico
Un fotomosaico es una foto compuesta de una colección de imágenes más pequeñas, las cuales son ordenadas de tal manera en que presenten una imagen más grande. El Arte ASCII es un medio artítico donde se utilizan los caracteres que componen al código ASCII para la construcción de imágenes. Este ha sido utilizado cuando no es posible la transmisión de imágenes en dispositivos computarizados que no cuentan con los recursos necesarios, como lo son tarjetas de proceso gráfico.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Procedural_texturing/</guid><description>Procedural texturing # En computación gráfica, una textura procedimental es una textura creada mediante una descripción matemática (es decir, un algoritmo) en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo coste de almacenamiento, la resolución ilimitada de las texturas y la facilidad de mapeo de las mismas.
procedural texturing js let pg; let colt; let truchetShader; let colorShader; let brickShader; let dotsShader; let textura; const opcionesS = {&amp;#39;None&amp;#39;: 0, &amp;#39;truchet&amp;#39;:1, &amp;#39;color&amp;#39;:2,&amp;#39;bricks&amp;#39;:3,&amp;#39;dots&amp;#39;:4, &amp;#39;plasma&amp;#39;:5}; function preload() { // shader adapted from here: https://thebookofshaders.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Spatial_Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Spatial_Coherence/</guid><description>Spatial Coherence # Exercise
Implement your own source dataset and a mechanism to select different images from it.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/shortcodes/Shaders/Texturing/</guid><description>Ejercicios: Texturing # UV Visualization # Exercise
Redefine the shape texture coordinates to turn the above image upside down.
Exercise
Include the blue channel in the uv visualization (e.g., use blue with red or green channels).
Texture Sampling # HSL( hue, saturation, lightness) y HSV ( hue, saturation, value o HSB con brightness) son formas alternativas de representar el modelo de color RGB.
Hue (Tono): Es el color mismo, definido físicamente por una longitud de onda.</description></item></channel></rss>